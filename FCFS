#include <stdio.h>

#define MAX_PROCESSES 10

typedef struct {
    int processNumber;
    int burstTime;
    int arrivalTime;
    int compilerTime;
    int turnAroundTime;
    int waitingTime;
} Process;

void calculateCompilerTimes(Process processes[], int n);
void calculateTurnAroundTimes(Process processes[], int n);
void calculateWaitingTimes(Process processes[], int n);
void displayProcessDetails(Process processes[], int n);
float calculateAverageTurnAroundTime(Process processes[], int n);
float calculateAverageWaitingTime(Process processes[], int n);

int main() {
    int n, i;
    Process processes[MAX_PROCESSES];

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter process number, arrival time, and burst time for each process:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        printf("Process number: ");
        scanf("%d", &processes[i].processNumber);
        printf("Arrival time: ");
        scanf("%d", &processes[i].arrivalTime);
        printf("Burst time: ");
        scanf("%d", &processes[i].burstTime);
        printf("\n");
    }

    calculateCompilerTimes(processes, n);
    calculateTurnAroundTimes(processes, n);
    calculateWaitingTimes(processes, n);
    displayProcessDetails(processes, n);

    float avgTurnAroundTime = calculateAverageTurnAroundTime(processes, n);
    float avgWaitingTime = calculateAverageWaitingTime(processes, n);

    printf("\nAverage Turn Around Time: %.2f\n", avgTurnAroundTime);
    printf("Average Waiting Time: %.2f\n", avgWaitingTime);

    return 0;
}

void calculateCompilerTimes(Process processes[], int n) {
    int i;

    processes[0].compilerTime = processes[0].burstTime;

    for (i = 1; i < n; i++) {
        processes[i].compilerTime = processes[i - 1].compilerTime + processes[i].burstTime;
    }
}

void calculateTurnAroundTimes(Process processes[], int n) {
    int i;

    for (i = 0; i < n; i++) {
        processes[i].turnAroundTime = processes[i].compilerTime - processes[i].arrivalTime;
    }
}

void calculateWaitingTimes(Process processes[], int n) {
    int i;

    for (i = 0; i < n; i++) {
        processes[i].waitingTime = processes[i].turnAroundTime - processes[i].burstTime;
    }
}

void displayProcessDetails(Process processes[], int n) {
    int i;

    printf("\nProcess\tArrivalTime\tBurstTime\tCompilerTime\tTurnAroundTime\tWaitingTime\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].processNumber, processes[i].arrivalTime,
               processes[i].burstTime, processes[i].compilerTime, processes[i].turnAroundTime, processes[i].waitingTime);
    }
}

float calculateAverageTurnAroundTime(Process processes[], int n) {
    int i;
    float totalTurnAroundTime = 0;

    for (i = 0; i < n; i++) {
        totalTurnAroundTime += processes[i].turnAroundTime;
    }

    return totalTurnAroundTime / n;
}

float calculateAverageWaitingTime(Process processes[], int n) {
    int i;
    float totalWaitingTime = 0;

    for (i = 0; i < n; i++) {
        totalWaitingTime += processes[i].waitingTime;
    }

    return totalWaitingTime / n;
}
